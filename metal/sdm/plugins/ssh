#!/bin/bash
#
# This is an sdm plugin for: ssh
#
# The plugin is called three times: for Phase 0, Phase 1, and post-install.
#

function loadparams() {
    source $SDMPT/etc/sdm/sdm-readparams
}

function get_home_dir() {
    # Phase-agnostic
    local user="$1"
    getent passwd $user | cut -d: -f6
}

# $1 is the phase: "0", "1", or "post-install"
# $2 is the argument list: arg1=val1|arg2=val2|arg3=val3| ...
#
# Main code for the Plugin
#
phase=$1
pfx="$(basename $0)"     #For messages
args="$2"
loadparams
vldargs="|user|keysfile|pubkey|" # Valid arguments
rqdargs="|user|"                 # Required arguments
assetdir="$SDMPT/etc/sdm/assets/$pfx"

logtoboth "HELP Plugin $pfx: Enter phase $phase"
if [ "$phase" == "0" ]
then
    #
    # In Phase 0 all references to directories in the image must be preceded by $SDMPT
    #
    logtoboth "[*] Plugin $pfx: Start Phase 0"
    plugin_getargs $pfx "$args" "$vldargs" "$rqdargs" || exit
    #
    # Print the keys found (example usage). plugin_getargs returns the list of found keys in $foundkeys
    #
    plugin_dbgprint "[*] Calling 'plugin_printkeys'"
    plugin_printkeys

    if [ -z "$keysfile" ] && [ -z "$pubkey"]
    then
        logtoboth "[-] No keys specified. Nothing to do"
        exit 1
    elif [ -n "$keysfile" ] && [ -n "$pubkey" ]
    then
        logtoboth "[-] 'keysfile' and 'pubkey' are mutually exclusive"
        exit 1
    fi

    mkdir -p $assetdir
    logtoboth "[+] Directory '$assetdir' created successfuly"

    keys_assets_file=$assetdir/ssh-authorized_keys
    if [ -n "$keysfile" ] && [ ! -f "$keysfile" ]
    then
        logtoboth "[-] '$keysfile' not found"
        exit 1
    else
        cp --verbose --preserve=all $keysfile $keys_assets_file
        logtoboth "[+] Created 'authorized_keys' file in assets directory"
    fi

    if [ -n "$pubkey" ]
    then
        echo "$pubkey" >> $keys_assets_file
        logtoboth "[+] Added public key to 'authorized_keys' file in assets directory"
    fi

    sshd_asset_file=$assetdir/ssh-sshd_config
    tee -a $sshd_asset_file << OWO
AcceptEnv LANG LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE LC_MONETARY LC_MESSAGES
AcceptEnv LC_PAPER LC_NAME LC_ADDRESS LC_TELEPHONE LC_MEASUREMENT
AcceptEnv LC_IDENTIFICATION LC_ALL LANGUAGE

PrintMotd no
X11Forwarding no

AuthenticationMethods publickey
PubkeyAuthentication yes
PasswordAuthentication no
ChallengeResponseAuthentication no
PermitEmptyPasswords no
PermitRootLogin no
UsePAM no

DebianBanner no
ClientAliveInterval 300
IgnoreRhosts yes
Protocol 2
TCPKeepAlive no
OWO
    logtoboth "[+] Created sshd config file in assets directory"

    logtoboth "* Plugin $pfx: Complete Phase 0"
elif [ "$phase" == "1" ]
then
    #
    # Phase 1 (in nspawn)
    #
    logtoboth "* Plugin $pfx: Start Phase 1"
    plugin_getargs $pfx "$args" "$vldargs" "$rqdargs"
    #logfreespace "at start of Plugin $pfx Phase 1"
    #
    home_dir=$(get_home_dir $user)
    if [ -z "$home_dir" ]
    then
        logtoboth "[\!] '$user' doesn't have a home directory. Creating one..."
        mkdir -p $home_dir
    fi

    ssh_dir="$home_dir/.ssh"
    if [ ! -d "$ssh_dir" ]
    then
        mkdir -p $ssh_dir
    fi
    chmod 700 $ssh_dir
    plugin_dbgprint "[*] ssh_dir=\"$ssh_dir\""

    cp --verbose $assetdir/ssh-authorized_keys $ssh_dir/authorized_keys
    chmod 600 $ssh_dir/authorized_keys
    chown -R $user:$user $ssh_dir

    sshd_config_file=$SDMPT/etc/ssh/sshd_config.d/sdm-ssh-plugin.conf
    cp --verbose $assetdir/ssh-sshd_config $sshd_config_file
    logtoboth "[+] Added new sshd config file => $sshd_config_file"

    logtoboth '[*] Removing rename_user.conf file'
    rm --force --verbose $SDMPT/etc/ssh/sshd_config.d/rename_user.conf

    logfreespace "at end of $pfx Phase 1"
    logtoboth "* Plugin $pfx: Complete Phase 1"
elif [ "$phase" == "post-install" ]
then
    #
    # Plugin Post-install edits
    #
    logtoboth "* Plugin $pfx: Start Phase post-install"
    plugin_getargs $pfx "$args" "$vldargs" "$rqdargs"
    #logfreespace "at start of Plugin $pfx Phase post-install"
    #
    # INSERT Your Plugin's post-install code here
    # In Phase post-install all references to directories in the image can be direct
    #
    #logfreespace "at end of $pfx Custom Phase post-install"
    logtoboth "* Plugin $pfx: Complete Phase post-install"
fi
